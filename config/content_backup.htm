<h1>About</h1>
<p>網頁: <a class="Link--inTextBlock" href="https://qiu0908.github.io/cd2024/">https://qiu0908.github.io/cd2024/</a></p>
<p>網誌:<a href="https://qiu0908.github.io/cd2024/blog">https://qiu0908.github.io/cd2024/blog</a></p>
<p>簡報: <a href="https://qiu0908.github.io/cd2024/reveal">https://qiu0908.github.io/cd2024/reveal</a></p>
<p>倉儲: <a href="https://github.com/QIU0908/cd2024">https://github.com/QIU0908/cd2024</a></p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p style="padding-left: 30px;">此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p style="padding-left: 30px;">倉儲對應網站: <a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_site</a></p>
<h1>每週任務及相關步驟</h1>
<p>說明: 盡可能詳細描述每周任務所做的事情，並將每個步驟進行詳細說明。附上相關圖片或影片，並提供參考資料以供查證。</p>
<h2>w1 個人 cd2024 倉儲的建立及維護</h2>
<p></p>
<p>1.<span>個人 cd2024<a href="https://github.com/QIU0908/cd2024">倉儲</a></span></p>
<p></p>
<p><span>2.建立方法 </span></p>
<p><span>                a.利用<a href="https://github.com/mdecycu/cmsimde_site">此倉儲</a>作為 Template</span></p>
<p><span>                b.新增一個名稱為 cd2024 的倉儲</span></p>
<p><span>3.維護方法 </span></p>
<p>               <span> a. 利用Codespaces </span></p>
<p><span>                b.  git add . // git commit -m"  " // git push 等進行維護</span></p>
<p>  啟動動態</p>
<p>             python3 main.py</p>
<p></p>
<p><span></span>4.設定 GitHub 帳號的雙重認證</p>
<p></p>
<p>5.下載可攜套件檔案</p>
<p></p>
<p>//////////////////////////////////////////////////////////////////////////////////</p>
<p>參考資料</p>
<p><span> 1.<a href="https://mde.tw/cd2024/blog/2024-cd-2a-get-started.html">協同產品設計實習2a-1 blog</a></span></p><h2>w2</h2>
<p>1.分組 並 創立分組倉儲: 為<a class="AppHeader-context-item" data-analytics-event='{"category":"SiteHeaderComponent","action":"context_region_crumb","label":"mdecd2024","screen_size":"full"}' data-hovercard-type="organization" data-hovercard-url="/orgs/mdecd2024/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" data-view-component="true" href="https://github.com/mdecd2024"><span class="AppHeader-context-item-label">mdecd2024</span></a><span class="AppHeader-context-item-separator">/</span><a class="AppHeader-context-item" data-analytics-event='{"category":"SiteHeaderComponent","action":"context_region_crumb","label":"2a-midag2","screen_size":"full"}' data-view-component="true" href="https://github.com/mdecd2024/2a-midag2"><span class="AppHeader-context-item-label">2a-midag2</span></a>的組員</p>
<p>     步驟:</p>
<p></p>
<p>2.建立協同網站</p>
<p>    組長:進入老師給的</p>
<p>3.replit協同網站github</p>
<h2>w3</h2>
<p>學習如何改blog</p>
<p>1.複製上一周blog</p>
<p>2.改Title Date Category Slug 內容</p>
<p>3. ./gen_blog</p>
<p>4.git add .</p>
<p>5.git commit -m" "</p>
<p>6.git push</p>
<h2>w4</h2>
<p>1.<a href="https://www.youtube.com/watch?v=vY2wRD4qwUk">cd2024_2a_w2_5 如何利用近端可攜環境與外部 IPv4 開啟動態網站</a>的字幕</p>
<p>2.其影片逐字稿</p>
<p>3.為了上傳 影片 檔案 照片等 學習了blog寫法</p>
<p></p>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/41123119_nfu_edu_tw/EeGW7m9iY5tJkDUgzzq3fH4B83ETe0vDPqSYLORW6I3B5g?e=58uh5Q">影片</a> 及 <a href="https://nfuedu-my.sharepoint.com/:t:/g/personal/41123119_nfu_edu_tw/EVJQRrVtylVKtuM7_F2ElKABxKFPszDOjyckey4MCZCTjw?e=RFxfP1">逐字稿</a></p>
<h2>w5</h2>
<p><span>1.在分組倉儲的<a href="https://mdecd2024.github.io/2a-midag2/blog/41123119-w4.html">w4 blog</a>新增自己的字評與影片 字幕</span></p>
<p><span>2.下載 Siemens NX 1872 至個人隨身碟或電腦</span></p>
<h2>w6</h2>
<p>update 了 組中自己的子模組 且學習如何用branch 協同更新</p>
<p>方法如下:</p>
<p>1.在github main create new branch //branch name 我使用學號 41123119</p>
<p>2.進入自己的branch</p>
<p>3.create a codspeace on 41123119</p>
<p>4.open codspeace</p>
<p>5.chmod u+x init_replit ./init_replit</p>
<p>6.git submodule update --init //將 git submodule init 和 git submodule update 合併成一步</p>
<p>7.cd 41123119 //進入41123119的子模組</p>
<p>8.git pull origin main//從遠端更新程式碼 並將 main 合併至分支41123119</p>
<p>9.cd ..//退到大廳</p>
<p>10.git add . git commit git push</p>
<p>11.git merge//合併branch 41123119 至 main</p>
<p>12.在github確定沒衝突的合併後送出請求</p>
<p>13.同意後即可</p>
<p>14.合併後的branch 只要沒有與main有衝突的合併應該可以一直用</p>
<h2>w7</h2>
<p>連假</p>
<h2>w8</h2>
<p><span>1.一分鐘的影片報告</span></p>
<p><span>2.把期中latex個人作業完成 </span><a href="https://raw.githubusercontent.com/QIU0908/cd2024/main/images/latax%20t6g4.txt">latex txt 檔</a><span> </span><a href="https://github.com/QIU0908/cd2024/blob/main/images/homework.pdf">latex pdf 檔</a><span> </span></p>
<p><span>3.整理之前的blog</span></p><h2>w9</h2>
<p><span>1.把一分鐘的影片報告放到各分組網誌</span></p>
<p><span> 2.整理之前的blog</span></p>
<h2>w10</h2>
<p><span></span></p>
<h3>1.任務一</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import window, ajax, document, html
  
def fetch_csv_data():
  # CSV 檔案網址
  url = "https://mdecd2024.github.io/2astud-2asite/downloads/2a.txt"
    
  def on_complete(req):
    if req.status == 200 or req.status == 0:
      # 讀取 CSV 檔案內容
      content = req.text
    
      # 依照換行符號拆分資料
      lines = content.split('\n')
    
      # 建立空列表儲存資料
      data = []
    
      # 遍歷每一行資料
      for line in lines:
        # 忽略空白行
        if line.strip() == "":
          continue
    
        # 依照逗號拆分資料
        items = line.split(',')
    
        # 將拆分後的資料加入列表
        data.append(items)
        
      # 必須去除 data 的第一列標題資料, 只取序號為 1 之後的資料
      data = data[1:]
    
      # 取得 html 可以插入的標註位置
      brython_div = document["brython_div1"]
      course_title = "cd2024"
  
      # 逐一處理學員資料
      index = 0
      for items in data:
        index += 1
        student_id, github_username, group = items
          
        if github_username == "":
          github_username = "000"
          
        # 建立網站和倉儲連結，使用正確的模板
        site_url = f"https://{github_username}.github.io/{course_title}"
        repo_url = f"https://github.com/{github_username}/{course_title}"
        group_site_url = f"https://mdecd2024.github.io/2a-midag{group}"
        group_repo_url = f"https://github.com/mdecd2024/2a-midag{group}"
  
        # 添加學號, 網站, 倉儲連結和序號到 brython_div
        brython_div &lt;= str(index) + ". " + html.A(student_id, href=site_url)
        brython_div &lt;= " ("
        brython_div &lt;= html.A("repo", href=repo_url)
        brython_div &lt;= ") | "
        brython_div &lt;= html.A("Group Site", href=group_site_url)
        brython_div &lt;= " | "
        brython_div &lt;= html.A("Group Repo", href=group_repo_url)
        brython_div &lt;= html.BR()
  
    else:
      print("Error:", req.text)
    
  # 發送 AJAX 請求
  req = ajax.ajax()
  req.bind('complete', on_complete)
  req.open('GET', url, True)
  req.set_header('content-type', 'application/x-www-form-urlencoded')
  req.send()
    
# 呼叫函式讀取 CSV 資料
fetch_csv_data()
</pre>
<p></p>
<h3>2.任務二</h3>
<h4>文章一  : <span>Construction and theoretical study of a ball balancing platform (構建一個球體平衡平台涉及到平台本身的物理結構建造以及用於維持球體平衡的控制算法的理論研究)</span></h4>
<p><span>摘要內容 : </span><span>通過實施自動控制理論穩定動態系統時的局限性, </span><span>球平衡平臺的構造和理論研究, 通過實施穩定動態系統時的局限性自動控制理論. 通過物理構造的裝置作為理論的演示者, 進一步比較從牛頓力學得出的事實物理和計算機模擬結果. 為了能夠進行比較, 有必要設計一個能夠滿足系統要求的令人滿意的控制器. 在設備和控制方面, 為在平臺上平衡球的系統引入比例積分導數控制器. 進一步允許分析以確定穩定自然不穩定或半穩定系統時的局限性. 建立球體平衡平台的理論模型, 並與實際搭建的平台進行比較. 分析理論與實際結果之間的差異, 探討控制理論與系統實施的挑戰.</span></p>
<p><span></span></p>
<h4><span>文章二 : A real time control system for balancing a ball on a platform with FPGA parallel implementation (用於在平臺上平衡球的即時控制系統，具有FPGA並行實現)</span></h4>
<p><span>摘要內容 : </span>在一個FPGA晶元上開發了兩個並行PID控制器，用於獨立控制一個物件的兩個參數。確保了控制物件的PID控制器的輪廓計算的並行處理，調節器的輸出已經歸一化。通過自然類比，提高了在平台上調節球位置的精度。設計的控制器可用於即時控制具有許多受控參數的高速物體<span>。</span></p>
<p></p>
<h4>文章三 : <span>Simulation and Experimental Study of Ball Position Control at Biaxial Platform using State Space Approach (基於狀態空間方法的雙軸平臺球位控制模擬與實驗研究)</span></h4>
<p><span>摘要內容 : </span>本研究詳細設計並比較了三種控制結構，用於自動穩定球在板上的位置和球的軌跡跟蹤。即PD控制器、狀態空間反饋和狀態空間觀測器。所有三種方法都經過設計並進行了實際比較。所有結構都有一個共同的特徵。它是計算控制器參數的方法。通過牛頓方法推導的板上球數學模型和直流電機位置環路控制也是本文的一部分。</p>
<p></p>
<h4>文章四：<span>Design and Implementation a Ball Balancing System for Control Theory Course（控制理論課程的球平衡系統設計與實現）</span></h4>
<p><span>摘要內容：</span>開發一個球平衡系統，使用微控制器和相關控制演算法來保持球在橫樑上的平衡，以通過即時感官反饋調整橫樑的角度。在此過程中，製作了三個原型並相互比較，特別是在合理性和成本方面。通過集成一個伺服電機、一個距離感測器、一個微控制器板和一個機械平臺，可以很容易地設計整個系統。此外，他們將通過微控制器程式設計來理解和實現控制演算法。如果學生對MATLAB知之甚少。開發介面程式以在MATLAB中繪製即時位置曲線。這個簡化的系統將作為連接理論知識和實踐技能的橋樑。所提方法也適用於更複雜的系統<span>。</span></p>
<p><span></span></p>
<h4><span>文章五: Ball on the plate balancing control system (板上球平衡控制系統)</span></h4>
<p><span>摘要內容 : 平衡問題是一個持續的研究挑戰，適用於從教育到交通的許多興趣領域。二自由度球平衡實驗室試驗台是瞭解控制系統的重要設備。本文重點介紹了在板上平衡球的機械設計。使用電阻式觸摸屏獲取球體位置數據，使用步進電機和位置傳感器控制平台傾斜角度。 設計基於 AVR 微控制器的雙環下屬控制系統，使用 PID 控制器維持球體平衡。</span></p>
<p><span></span></p>
<h4><span>文章六 : 2D Ball Balancer Control using QUARC (使用 QUARC 的 2D 球平衡器控制)</span></h4>
<p><span>摘要內容 : 使用 QUARC 軟體設計和實現球體在二維平台上的位置控制。 設計 PD 和 PID 控制器，並探討設定點權重和積分器抗飽和等控制技術。 使用攝像頭讀取球體位置，並進行校準和轉換。</span></p>
<h3>3.任務三</h3>
<p>NX 平台零組件繪圖</p>
<p><a href="/downloads/平台.zip">檔案zip</a></p>
<p><a href="/downloads/平衡桿2- basis-1 - 43.6短連接桿-1.STL"></a></p>
<h2>w11</h2>
<div>
<div><span></span></div>
</div>
<p>1.平台繪圖完成 <a href="https://github.com/QIU0908/cd2024/blob/main/downloads/%E5%B9%B3%E5%8F%B0.zip">檔案</a></p>
<p>2.<a href="https://github.com/mdecd2024/2a-midag2/tree/6f85006bcb80f19ffcfcd0457c28290196604caf">分組倉儲設為評分倉儲子模組</a></p>
<p></p>
<h2>w15</h2>
<p><br/>被分配到的任務 為 實現平衡台可動</p>
<p><br/>以下說明方法</p>
<p><br/>step1.匯入組合stl</p>
<p><img alt="" height="577" src="/images/b1.png" width="800"/></p>
<p><br/>step2. Edit &gt; Shape groping / merging &gt; divide // 分解組合圖 成零件圖</p>
<p><img alt="" height="483" src="/images/b2.png" width="577"/></p>
<p><br/>step3. Edit &gt; Shape reference france &gt; relocate mesh center // 零件原點從組合圖原點 改成 零件質量原點</p>
<p><img alt="" height="547" src="/images/b3.png" width="676"/></p>
<p><br/>step4. Add &gt;Joint &gt; Revolute // 新增joint 取代 圓桿位置</p>
<p><img alt="" height="657" src="/images/b4.png" width="711"/></p>
<p></p>
<p><br/>step5.Edit &gt; Shape groping / merging &gt; group // 分別把 頂部 及 基底 的小零件 組合成 group</p>
<p><img alt="" height="649" src="/images/b5.png" width="800"/></p>
<p></p>
<p><br/>step6. 接著建立從屬關係 底板 &gt; joint 1 &gt; 頂板 &gt; 2X{ motor 1. &gt;長桿 1.&gt;joint 2 }&gt;接回 底板</p>
<p></p>
<p><img alt="" height="429" src="/images/b6.png" width="371"/></p>
<p></p>
<p></p>
<p>step7.各部件屬性 如下</p>
<p><img alt="" height="907" src="/images/b71.png" width="716"/></p>
<p><img alt="" height="853" src="/images/b72.png" width="684"/></p>
<p><img alt="" height="818" src="/images/b73.png" width="695"/></p>
<p></p>
<p><img alt="" height="876" src="/images/b74.png" width="703"/></p>
<p></p>
<p><img alt="" height="442" src="/images/b75.png" width="697"/></p>
<p><img alt="" height="441" src="/images/b76.png" width="687"/></p>
<p></p>
<p></p>
<p>step8.加入球</p>
<p><img alt="" height="977" src="/images/b8.png" width="695"/></p>
<p>step9.完成</p>
<p><img alt="" height="614" src="/images/b9.png" width="800"/></p>
<p></p>
<p></p>
<p></p>
<p><span style="color: #ff9900;"><strong>問題:</strong></span></p>
<p>1.底座件 連到 頂板的部分</p>
<p>解決:</p>
<p>1.複製 沒連到 零件 偏移 x 0.081 重新插入 底板零件 取代第一個底板位置</p>
<p>就不用重畫了</p>
<h1>每周心得或問題</h1>
<p>說明: 詳細記錄每周任務的心得體會，包括遇到的問題及其解決思路。</p>
<h2>w1</h2>
<p></p>
<div class="auto-hide-last-sibling-br paragraph_1252f paragraph-element">第一周的課程内容<span>跟以前的課一樣先把環境建起來</span>。<span>但這次多了</span>引入codespaces和Replit進行版本控制，這次的環境建置不僅延續了之前課程的基礎，還增加了新的工具和方法，這使得整個開發流程更加靈活和高效。</div>
<p></p>
<div class="auto-hide-last-sibling-br paragraph_1252f paragraph-element">Codespaces  <span>Replit  </span>可以在雲端運行，這樣可以隨時隨地開始工作，而不需要擔心硬碟的設置問題(單論網頁撰寫)。</div>
<p></p>
<div class="auto-hide-last-sibling-br paragraph_1252f paragraph-element">這些工具的使用，比起以往需要在本地機器上設置可攜環境和依賴外部IPv4來開設動態網站的方式，無疑提供了更大的便利性和可靠性。這樣的變化允許開發者專注於代碼和項目構建，而不是環境問題，這對於提高開發效率和項目質量都是非常有益的。</div>
<p></p>
<div class="auto-hide-last-sibling-br paragraph_1252f paragraph-element"></div>
<div class="auto-hide-last-sibling-br paragraph_1252f paragraph-element"></div>
<div class="auto-hide-last-sibling-br paragraph_1252f paragraph-element"><strong>三種版本控制工具 方便性 大到小(單論網頁撰寫)</strong></div>
<p></p>
<div class="auto-hide-last-sibling-br paragraph_1252f paragraph-element"><span></span></div>
<div class="auto-hide-last-sibling-br paragraph_1252f paragraph-element"><span></span></div>
<div class="auto-hide-last-sibling-br paragraph_1252f paragraph-element"></div>
<div class="auto-hide-last-sibling-br paragraph_1252f paragraph-element"><span>Codespaces &gt; Replit &gt;可攜環境</span></div>
<p></p>
<div class="auto-hide-last-sibling-br paragraph_1252f paragraph-element"><span></span></div>
<div class="auto-hide-last-sibling-br paragraph_1252f paragraph-element"><strong>說明排名原因</strong></div>
<div class="auto-hide-last-sibling-br paragraph_1252f paragraph-element"><span></span></div>
<ol>
<li class="auto-hide-last-sibling-br paragraph_1252f paragraph-element"><span>Codespaces :完全集成在 GitHub 平台內，允許你直接從倉庫界面啟動開發環境。</span></li>
<li class="auto-hide-last-sibling-br paragraph_1252f paragraph-element"><span><span>Replit : 需要</span></span>將授權後再將個人倉儲 import 至 Replit <a href="https://nfuedu-my.sharepoint.com/personal/yen_nfu_edu_tw/_layouts/15/stream.aspx?id=%2Fpersonal%2Fyen%5Fnfu%5Fedu%5Ftw%2FDocuments%2F2024%2Fcd2024%2Fvideo%2Fcd2024%5F2b%5F2%5F%E5%A6%82%E4%BD%95%E5%BE%9E%20Replit%20Account%20%E8%A8%AD%E5%AE%9A%20Connect%20%E9%80%A3%E7%B5%90%E5%88%B0%20Github%2Emp4&amp;nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0NvcHkifX0&amp;ga=1&amp;referrer=StreamWebApp%2EWeb&amp;referrerScenario=AddressBarCopied%2Eview%2E874512b8%2D8556%2D4390%2D80a7%2Dfa1e2e8c91d9">參考影片<span>。</span></a></li>
<li class="auto-hide-last-sibling-br paragraph_1252f paragraph-element"><span>可攜環境 :須將倉儲git clone 又要PuTTY 建key 有一堆先前事要做但對於底層邏輯理解很有幫助!</span><span></span></li>
</ol><h2>w2</h2>
<h2>w3</h2>
<h2>w4</h2>
<h2>w5</h2>
<p></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>